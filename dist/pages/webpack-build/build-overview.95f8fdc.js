webpackJsonp([6,9],{10:function(n,e){n.exports=function(n,e,s,t){var c,r=n=n||{},i=typeof n.default;"object"!==i&&"function"!==i||(c=n,r=n.default);var a="function"==typeof r?r.options:r;if(e&&(a.render=e.render,a.staticRenderFns=e.staticRenderFns),s&&(a._scopeId=s),t){var o=a.computed||(a.computed={});Object.keys(t).forEach(function(n){var e=t[n];o[n]=function(){return e}})}return{esModule:c,exports:r,options:a}}},36:function(n,e,s){s(37);var t=s(10)(s(39),s(40),null,null);n.exports=t.exports},37:function(n,e,s){var t=s(38);"string"==typeof t&&(t=[[n.id,t,""]]);s(9)(t,{});t.locals&&(n.exports=t.locals)},38:function(n,e,s){e=n.exports=s(8)(),e.push([n.id,"",""])},39:function(n,e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default={data:function(){return{}}}},40:function(n,e){n.exports={render:function(){var n=this,e=n.$createElement;n._self._c||e;return n._m(0)},staticRenderFns:[function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("div",{attrs:{id:"build-overview"}},[s("h2",[n._v("编译配置")]),n._v(" "),s("h3",[n._v("webpack.build.js")]),n._v(" "),s("div",{staticClass:"eg-code"},[s("pre",[n._v("\n            "),s("code",[n._v("\nvar path = require('path');\nvar webpack = require('webpack');\nvar config = require('./webpack.base.js');\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\nvar CleanWebpackPlugin = require('clean-webpack-plugin');\n\n// 配置 CommonsChunkPlugin 单独打包的文件，打包后为 lib.js，不会合并到 app.js\nconfig.entry.lib = [\n    // 'jquery',\n    'vue',\n    'vue-router'\n];\n\n// 配置其他自定义文件\n/*config.entry.service = [\n    path.resolve(__dirname, '../src/service/test.js')\n];*/\n\n// 将 app.js 的 hash 改为 chunckhash，dev 环境不能用 chunckhash\n// hash 计算整个项目，一个文件改动后 hash 就会改变\n// chunckhash 计算单个文件，只改变对应修改的文件\n// 如果文件内引入了 css，js || css 改变，chunckhash 也会改变\n// http://www.cnblogs.com/ihardcoder/p/5623411.html\nconfig.output.filename = '[name].[chunkhash:7].js';\n\n// 配置生产环境 cdn 路径\n// config.output.publicPath = '//cdn.com/demo/';\n\n// 配置 ExtractTextPlugin，提取 css\n// 同样禁用 css-loader 默认的 autoprefixer，不然自定义的会失效\nconfig.module.loaders.forEach(function(el) {\n    if (el.test.toString() === /\\.css$/.toString()) {\n        el.loader = ExtractTextPlugin.extract('style', 'css?-autoprefixer!postcss');\n    }\n    if (el.test.toString() === /\\.scss$/.toString()) {\n        el.loader = ExtractTextPlugin.extract('style', 'css?-autoprefixer!postcss!sass');\n    }\n});\n\nconfig.plugins.unshift(\n    // 清空 dist\n    new CleanWebpackPlugin(['dist'], {\n        // 根的绝对路径\n        \"root\": path.resolve(__dirname, '../'),\n        // 将 log 写到 console.\n        \"verbose\": true,\n        // 排除不删除的目录，主要用于避免删除公用的文件\n        \"exclude\": []\n    }),\n\n    // 通用模块单独打包 manifest 为 runtime 文件，里面包含了每个文件的 hash，每次打包都会改变，所以单独打包\n    // htmlWebpackPlugin 会根据 names 配置 从右到左 依次将打包后的文件插入 index.html，如果 service 依赖于 lib ，需要把 service 放到 lib 前， e.g. service 为 Vue.direcitve，lib 为 vue\n    new webpack.optimize.CommonsChunkPlugin({\n        // names: ['service', 'lib', 'manifest'],\n        names: ['lib', 'manifest'],\n        //默认加 hash\n        filename: '[name].[chunkhash:7].js'\n    }),\n\n    //提取 require('xxx.css')\n    // allChunks=true  同时require 和 import 会重复\n    // a.vue => @import 'a.css' 不会提取\n    // (b.css && c.css) => @import 'a.css'  extract.css => a.css+b.css+c.css\n    // (a.vue && b.vue) => require('a.css') 只提取1份 + (b.css && c.css) => @import 'a.css'  只提取1份 = extract.css => a.css*2+b.css+c.css\n\n    // new ExtractTextPlugin('css/layout.[contenthash:7].css'),\n    // 将 css 提取到目录后会有问题\n    // dev         bg: url(../images/bg.jpg)\n    // build       bg: url(images/bg.jpg) => dist/css/images/bg.jpg\n    // https://github.com/webpack/extract-text-webpack-plugin/issues/27\n\n    // 直接提取到 dist/ 下\n    new ExtractTextPlugin('layout.[contenthash:7].css'),\n\n/*    new ExtractTextPlugin('layout.[contenthash:7].css', {\n        allChunks : true\n    }),*/\n\n    // 压缩 会把 autoprefixer 的 browsers 设为默认值，之前配置无效 \n    // 禁用配置 css?-autoprefixer\n    // https://github.com/postcss/autoprefixer/issues/660\n    new webpack.optimize.UglifyJsPlugin({\n        compress: {\n            warnings: false\n        }\n    })\n);\n\nmodule.exports = config;\n\nwebpack(config, function(err, stats) {\n\n    if (err) throw err;\n\n    process.stdout.write(stats.toString({\n        chunks: false,\n        colors: true\n    }));\n});\n            ")]),n._v("\n        ")])])])}]}}});